#We input the list [5, 2, 1, 8, 4, 7, 6, 3]
#I will provide comments for what is happening at each step
#based on what recursion we are at. Please note that each recursion
#will be marked with its prefix. 1 will refer to the first recursion
#and so on.
quickSort(Integer[] list) 
    #1 [5, 2, 1, 8, 4, 7, 6, 3].length = 8 <= 1 -> False
    if list.length <= 1 then #This will be the base case.
        do return list
    end if
    #This is the same as we did with MergeSort. So, 
    so far the same.
    
    #We then have to find the middle value. 
    int middleIndex = list.length / 2 
    int pivot = list[middleIndex]
    #1 pivot = 8

    #We need to have two lists for keeping
    track over values higher or lower than
    the pivot.
    int[] high
    int[] low


    #We need to sort what values are higher
    #and what values that are lower than 
    #the pivot and assign the values
    #tho their corresponding list.
    for int i = 0; i < list.length; i++

        #We do not want to add the pivot
        #value to either of the over or 
        #under lists. 
        if i == middleIndex then
            do continue
        end if
        
        if list[i] > pivot then 
            do high.add(list[i])
        else 
            low.add(list[i])
        end if
    end loop
    
    #1 low = [5, 2, 1, 4, 7, 6, 3]
    #1 high = []

    int[] finalHigh = execute(high)
    int[] finalLow = execute(low)

    return concatenate(finalLow, pivot, finalHigh)


concatenate(int[] low, int pivot, int[] high) 

    #We must define the resulting concatenated list
    #to be the size of the sum of the size of the two
    #sorted lists, high and low plus 1 representing the place
    #for the pivot value.
    int list size = low.length +  high.length + 1
    int[] result = new int[list size]

    result[0:low.length] = low
    result[length + 1] = pivot
    result[length + 2: high.length] = high

    return result

# Continuing with the recursion for the low list [5, 2, 1, 4, 7, 6, 3]
quickSort(Integer[] list) 
    #2 [5, 2, 1, 4, 7, 6, 3].length = 7 <= 1 -> False
    if list.length <= 1 then 
        do return list
    end if
    
    int middleIndex = list.length / 2 
    int pivot = list[middleIndex]
    #2 pivot = 4

    int[] high
    int[] low

    for int i = 0; i < list.length; i++
        if i == middleIndex then
            do continue
        end if
        
        if list[i] > pivot then 
            do high.add(list[i])
        else 
            low.add(list[i])
        end if
    end loop
    
    #2 low = [2, 1, 3]
    #2 high = [5, 7, 6]

    int[] finalHigh = execute(high)
    int[] finalLow = execute(low)

    return concatenate(finalLow, pivot, finalHigh)

# Continuing with the recursion for the low list [2, 1, 3]
quickSort(Integer[] list) 
    #3 [2, 1, 3].length = 3 <= 1 -> False
    if list.length <= 1 then 
        do return list
    end if
    
    int middleIndex = list.length / 2 
    int pivot = list[middleIndex]
    #3 pivot = 1

    int[] high
    int[] low

    for int i = 0; i < list.length; i++
        if i == middleIndex then
            do continue
        end if
        
        if list[i] > pivot then 
            do high.add(list[i])
        else 
            low.add(list[i])
        end if
    end loop
    
    #3 low = []
    #3 high = [2, 3]

    int[] finalHigh = execute(high)
    int[] finalLow = execute(low)

    return concatenate(finalLow, pivot, finalHigh)

# Continuing with the recursion for the high list [2, 3]
quickSort(Integer[] list) 
    #4 [2, 3].length = 2 <= 1 -> False
    if list.length <= 1 then 
        do return list
    end if
    
    int middleIndex = list.length / 2 
    int pivot = list[middleIndex]
    #4 pivot = 3

    int[] high
    int[] low

    for int i = 0; i < list.length; i++
        if i == middleIndex then
            do continue
        end if
        
        if list[i] > pivot then 
            do high.add(list[i])
        else 
            low.add(list[i])
        end if
    end loop
    
    #4 low = [2]
    #4 high = []

    int[] finalHigh = execute(high)
    int[] finalLow = execute(low)

    return concatenate(finalLow, pivot, finalHigh)

# Base case for the low list [2]
quickSort(Integer[] list) 
    #5 [2].length = 1 <= 1 -> True
    if list.length <= 1 then 
        do return list
    end if

# Base case for the high list []
quickSort(Integer[] list) 
    #6 [].length = 0 <= 1 -> True
    if list.length <= 1 then 
        do return list
    end if

# Concatenating the results for the high list [2, 3]
concatenate(int[] low, int pivot, int[] high) 
    # low = [2]
    # pivot = 3
    # high = []
    int list size = low.length +  high.length + 1
    int[] result = new int[list size]

    result[0:low.length] = low
    result[length + 1] = pivot
    result[length + 2: high.length] = high

    return result
    # Result = [2, 3]

# Concatenating the results for the low list [1, 2, 3]
concatenate(int[] low, int pivot, int[] high) 
    # low = []
    # pivot = 1
    # high = [2, 3]
    int list size = low.length +  high.length + 1
    int[] result = new int[list size]

    result[0:low.length] = low
    result[length + 1] = pivot
    result[length + 2: high.length] = high

    return result
    # Result = [1, 2, 3]

# Continuing with the recursion for the high list [5, 7, 6]
quickSort(Integer[] list) 
    #7 [5, 7, 6].length = 3 <= 1 -> False
    if list.length <= 1 then 
        do return list
    end if
    
    int middleIndex = list.length / 2 
    int pivot = list[middleIndex]
    #7 pivot = 7

    int[] high
    int[] low

    for int i = 0; i < list.length; i++
        if i == middleIndex then
            do continue
        end if
        
        if list[i] > pivot then 
            do high.add(list[i])
        else 
            low.add(list[i])
        end if
    end loop
    
    #7 low = [5, 6]
    #7 high = []

    int[] finalHigh = execute(high)
    int[] finalLow = execute(low)

    return concatenate(finalLow, pivot, finalHigh)

# Continuing with the recursion for the low list [5, 6]
quickSort(Integer[] list) 
    #8 [5, 6].length = 2 <= 1 -> False
    if list.length <= 1 then 
        do return list
    end if
    
    int middleIndex = list.length / 2 
    int pivot = list[middleIndex]
    #8 pivot = 6

    int[] high
    int[] low

    for int i = 0; i < list.length; i++
        if i == middleIndex then
            do continue
        end if
        
        if list[i] > pivot then 
            do high.add(list[i])
        else 
            low.add(list[i])
        end if
    end loop
    
    #8 low = [5]
    #8 high = []

    int[] finalHigh = execute(high)
    int[] finalLow = execute(low)

    return concatenate(finalLow, pivot, finalHigh)

# Base case for the low list [5]
quickSort(Integer[] list) 
    #9 [5].length = 1 <= 1 -> True
    if list.length <= 1 then 
        do return list
    end if

# Base case for the high list []
quickSort(Integer[] list) 
    #10 [].length = 0 <= 1 -> True
    if list.length <= 1 then 
        do return list
    end if

# Concatenating the results for the low list [5, 6]
concatenate(int[] low, int pivot, int[] high) 
    # low = [5]
    # pivot = 6
    # high = []
    int list size = low.length +  high.length + 1
    int[] result = new int[list size]

    result[0:low.length] = low
    result[length + 1] = pivot
    result[length + 2: high.length] = high

    return result
    # Result = [5, 6]

# Concatenating the results for the high list [5, 6, 7]
concatenate(int[] low, int pivot, int[] high) 
    # low = [5, 6]
    # pivot = 7
    # high = []
    int list size = low.length +  high.length + 1
    int[] result = new int[list size]

    result[0:low.length] = low
    result[length + 1] = pivot
    result[length + 2: high.length] = high

    return result
    # Result = [5, 6, 7]

# Concatenating the results for the low list [1, 2, 3, 4, 5, 6, 7]
concatenate(int[] low, int pivot, int[] high) 
    # low = [1, 2, 3]
    # pivot = 4
    # high = [5, 6, 7]
    int list size = low.length +  high.length + 1
    int[] result = new int[list size]

    result[0:low.length] = low
    result[length + 1] = pivot
    result[length + 2: high.length] = high

    return result
    # Result = [1, 2, 3, 4, 5, 6, 7]

# Concatenating the final results [1, 2, 3, 4, 5, 6, 7, 8]
concatenate(int[] low, int pivot, int[] high) 
    # low = [1, 2, 3, 4, 5, 6, 7]
    # pivot = 8
    # high = []
    int list size = low.length +  high.length + 1
    int[] result = new int[list size]

    result[0:low.length] = low
    result[length + 1] = pivot
    result[length + 2: high.length] = high

    return result
    # Final Result = [1, 2, 3, 4, 5, 6, 7, 8]